1.什么是AQS？使用方式和其中的设计模式?了解其中的方法?怎么实现类似于ReentrantLock的锁？
AQS(AbstractQueuedSynchronizer)
抽象队列同步器
基本思想：CLH队列锁

常用的阻塞队列：ArrayBlockingQueue
             LinkedBlockingQueue
             ...

AbstractQueuedSynchronizer
    /**
     * The synchronization state.
     */
    private volatile int state;

都是围绕这个state进行，同步状态是否发生变化.
getState()
setState()
compareAndSetState()
AQS 定义了两种资源共享方式：
1.Exclusive：独占，只有一个线程能执行，如ReentrantLock
2.Share：共享，多个线程可以同时执行，如Semaphore、CountDownLatch、ReadWriteLock，CyclicBarrier

不同的自定义的同步器争用共享资源的方式也不同。


AbstractQueuedSynchronizer模版方法设计模式

所有的显式锁都需要实现Lock接口：
显式锁的实现类主要有三个，ReentrantLock 是其最主要的实现类，ReadLock 和 WriteLock 是 ReentrantReadWriteLock 内部定义的两个内部类，
他们继承自 Lock 并实现了其定义的所有方法，精细化读写分离。
而 ReentrantReadWriteLock 向外提供读锁写锁。


synchronized和ReentrantLock对比

AQS：AbstractQueuedSynchronizer抽象的队列式同步器。是除了java自带的synchronized关键字之外的锁机制
AQS的核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并将共享资源设置为锁定状态，
如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。
AQS就是基于CLH队列，用volatile修饰共享变量state，线程通过CAS去改变状态符，成功则获取锁成功，失败则进入等待队列，等待被唤醒。
AQS是自旋锁：**在等待唤醒的时候，经常会使用自旋（while(!cas())）的方式，不停地尝试获取锁，直到被其他线程获取成功
实现了AQS的锁有：自旋锁、互斥锁、读锁写锁、条件产量、信号量、栅栏都是AQS的衍生物



可重入独占式锁：A释放锁之前，自己也是可以重复获取此锁（state累加），这就是可重入的概念。如：ReentrantLock