线程的分类：Thread、Runnable(只是抽象)

Thread、Runnable的区别？

时间片：抢占是式、协作式

run和start区别？
run只是普通类的普通方法而已，start：启动了一个线程并且和JDK中的进程挂钩(只能调用一次)

synchronized:内置锁
使用方式：
   锁方法
   锁代码块
对象锁
类锁
synchronized本质是锁某个对象。对象不一样的话还是能并行的。

volatile:关键字，最轻的同步机制


错误的加锁和原因分析？


ThreadLocal的使用
实现解析
引发的内存泄露分析
ThreadLocal的线程不安全
使用场景：变量：每个线程都有，并且是独有的
ThreadLocalMap需要"单例"
ThreadLocal无非就是往Thread中的变量map中set(key,val)数据,其中key为threadLocal本身


新建线程的方式
1.new Thread().start()
2.自定义Runnable,new Thread(runnable).start()
3.自定义Callable,new Thread(callable).start() -- 这种实际上不算(jdk源码说只有两种)
4.线程池实现
-- 后两种实际上不算(jdk源码说只有两种)

线程的状态(生命周期)
创建(new)、运行(start:实际也分就绪ready、运行中running)、等待(waite)、阻塞(bocked)、等待超时(time_waiting)、结束()
ready状态等待时间片
sleep进入等待状态
notify，nofityAll重新进入运行状态

死锁
条件：多个操作者争夺多个资源、争夺资源顺序不对、拿到资源不放手
打破：
1.如案例中lock3、lock4，都按顺序获取
2.拿锁允许放手(不用synchronized，用lock接口) lock接口可以中断锁，"花样拿锁"、尝试拿锁

很长(活锁，一直在拿锁、释放锁，直到符合条件)：解决：休眠一下
线程饥饿锁：拿不到时间
sleep不会释放锁

ThreadLocal：线程本地变量，每个线程都有一个副本
如果用HasMap实现ThreadLocal的功能，将副本放如HasMap中管理，多线程的时候导致多线程争夺HashMap
eg:
public class MyThreadLocal<T>{
   private Map<Thread,T> threadLocal = new HashMap<>();
   public synchronized T get(){
      return threadLocal.get(Thread.getCurrentThread());
   }
   public synchronized void set(T t){
      threadLocal.set(Thread.getCurrentThread(),t);
   }
}
会导致大量线程抢夺HashMap，激烈竞争。所以JDK没有使用这种方式实现。

ThreadLocal hash 冲突的线性探测法不好，还有 Entry 的弱引用可能会发生内存泄漏，这些都和 ThreadLocalMap 有关，所以需要搞个新的 map 来替换 ThreadLocalMap
Entry 的弱引用可能会发生内存泄漏：key为弱引用，value为强引用、并且没有操作remove操作，导致key为null时value不为空


原子操作：不可再分，比如说方法上加synchronized，要么全部做了，要么就全部没做。
synchronized能实现原子操作，但是太重了。比如简单的操作：i++

CAS：compare and swap(比较并且交换)
什么是CAS？如何实现原子操作？
原理：利用了现代处理器都支持CAS的指令，循环这个指令直到成功为止。
CAS缺点(三大问题)：ABA问题、开销问题、只能保证一个共享变量的原子操作
两个步骤：1比较 2交换。
AtomicInteger，实现多线程的i++


synchronized:悲观锁
CAS:乐观锁 自旋(死循环)：缺点A->B->C...->A之后还是认为没有改变  如果不关心中间是否被改过那就没问题； 开销问题：比较不等会重试，不断重试；只能针对一个地址进行
因为CAS有这三大问题，所以synchronized还有存在的价值

JDK提供的CAS原子操作类：AtomicBoolean、AtomicInteger、AtomicLong、AtomicIntegerArray..AtomicReference...

解决CAS的ABA问题，使用版本戳，只要改过版本号修改
解决CAS只操作一个变量：AtomicReference，把对象转为AtomicReference