apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
   // compileSdkVersion 28
    compileSdkVersion 28
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.linxz.androidinterview"
        minSdkVersion 18
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }

    signingConfigs {
        release {
            keyAlias 'linxz'
            keyPassword 'linxz123'
            // 相对路径
            storeFile file('/Users/linxz/Desktop/打包/AndroidInterview/interview')
            storePassword 'linxz123'
        }
        debug {
            keyAlias 'linxz'
            keyPassword 'linxz123'
            // 相对路径
            storeFile file('/Users/linxz/Desktop/打包/AndroidInterview/interview')
            storePassword 'linxz123'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    //多渠道打包
    flavorDimensions "default"
    productFlavors{
        Tencent{
            dimension "default"
            applicationId "com.linxz.streamlet"
            versionName "V1.1.0.0"
            buildConfigField "String", "CLIENT_ID", '"007"'
            buildConfigField "boolean", "IS_MINE", 'false'
            manifestPlaceholders = [
                    APP_PACKAGENAME: "com.linxz.streamlet",
                    "BUGLY_APPID":"9a98782b65",
                    JPUSH_PKGNAME : "com.linxz.streamlet",
                    JPUSH_APPKEY : "e7cb3de1ac4457647f95e7cf",
                    JPUSH_CHANNEL : "developer-default",
            ]
        }
        Huawei{
            dimension "default"
            applicationId "com.linxz.streamlet"
            versionName "V1.1.0.0"
            buildConfigField "String", "CLIENT_ID", '"007"'
            buildConfigField "boolean", "IS_MINE", 'false'
            manifestPlaceholders = [
                    APP_PACKAGENAME: "com.linxz.streamlet",
                    "BUGLY_APPID":"9a98782b65",
                    JPUSH_PKGNAME : "com.linxz.streamlet",
                    JPUSH_APPKEY : "e7cb3de1ac4457647f95e7cf",
                    JPUSH_CHANNEL : "developer-default",
            ]
        }
        Xiaomi{
            dimension "default"
            applicationId "com.linxz.streamlet"
            versionName "V1.1.0.0"
            buildConfigField "String", "CLIENT_ID", '"007"'
            buildConfigField "boolean", "IS_MINE", 'false'
            manifestPlaceholders = [
                    APP_PACKAGENAME: "com.linxz.streamlet",
                    "BUGLY_APPID":"9a98782b65",
                    JPUSH_PKGNAME : "com.linxz.streamlet",
                    JPUSH_APPKEY : "e7cb3de1ac4457647f95e7cf",
                    JPUSH_CHANNEL : "developer-default",
            ]
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    //
    api 'androidx.work:work-runtime:2.3.4'
    implementation project(path: ':annotations')

    //api 'com.yw.game.floatmenu:FloatMenu:1.0.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7-mpp-dev-11'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7-mpp-dev-11'
    api project(path: ':libNet')

}

configurations {
//这里要排除到这个包，这个包会与 com.google.guava 冲突，导致编译不过
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}


println "common.gradle storeFile:${signConfigs.storeFile}"



//将build中的apk拷贝出来
task('copyapk'){
    //doLast在gradle中的执行阶段去执行
    doLast{
        def sourcePath=this.buildDir.path+'/outputs/apk'
        def minePath='/Users/linxz/Desktop/打包/AndroidInterview'
        def command="mv -f ${sourcePath} ${minePath}"
        println command
        //执行命令固定不变，改变的只有command
        exec {
            try{
                executable 'bash'
                args '-c', command
                println 'the command is execute success'
            }catch(GradleException e){
                println 'the command is execute failed.'
            }
        }
    }
}


//task定义
//this.task.create(name:'helloTask2'){
//    setGroup('linxz')
//    setDescription('task study')
//    println 'i am helloTask2'
//}

task helloTask{
    println 'i am helloTask'
}

task(helloTask2{
    println 'i am helloTask2'
})


this.tasks.create(name:'helloTask3'){
    println 'i am helloTask3'
}

//添加分组之后，在编译器后面的gradle的task中就能看到linxz这个文件夹，task放在里面
task helloTask4(group:'linxz',description:'task study'){
    println 'i am helloTask4'
}

this.tasks.create(name:'helloTask5'){
    setGroup('linxz')
    setDescription('task')
    println 'i am helloTask5'
    //这两个闭包也可以提供给外部使用.先执行外部的，再执行内部的
    doFirst {
        //在执行阶段执行
        println 'do first helloTask5'
    }

    doLast {
        //
    }
}
helloTask5.doFirst{
    println 'do first_ helloTask5'
}


//统计build时长
def startBuildTime,endBuildTime
this.afterEvaluate {
    Project project->
    //这个里面所有的task都准备好了，可以在这里面获取所有的task
        def preBuildTask=project.tasks.getByName("preBuild")
        preBuildTask.doFirst {
            startBuildTime=System.currentTimeMillis()
            println 'the start time is:'+startBuildTime
        }
        def buildTask=project.tasks.getByName('build')
        buildTask.doLast {
            endBuildTime=System.currentTimeMillis()
            println "the build time is:${endBuildTime-startBuildTime}"
        }

}

//> Task :app:build
//the build time is:4452
//
//> Task :libNet:lint
//Ran lint on variant debug: 7 issues found
//Ran lint on variant release: 7 issues found
//Wrote HTML report to file:///Users/linxz/AndroidStudioProjects/AndroidInterView/libNet/build/reports/lint-results.html
//Wrote XML report to file:///Users/linxz/AndroidStudioProjects/AndroidInterView/libNet/build/reports/lint-results.xml
//执行阶段执行完毕
//
//BUILD SUCCESSFUL in 6s
//129 actionable tasks: 4 executed, 125 up-to-date
//linxzdeMacBook-Pro:AndroidInterView linxz$

//the build time is:4452   BUILD SUCCESSFUL in 6s 有差别是因为我这里的task只是执行阶段的，后面的时长有准备阶段的时间



//task添加依赖
task taskX{
    doLast{
        println 'taskX'
    }
}

task taskY{
    doLast{
        println 'taskY'
    }
}


//taskZ 添加taskX taskY依赖，然后执行taskZ，查看结果
//task taskZ(dependsOn:taskX){ //单个
//    doLast{
//        println 'taskZ'
//    }
//}
task taskZ(dependsOn:[taskX,taskY]){
    doLast{
        println 'taskZ'
    }
}
//> Task :app:taskX
//taskX
//
//> Task :app:taskY
//taskY
//
//> Task :app:taskZ
//taskZ
//执行阶段执行完毕  先执行taskX还是taskY是完全随机的，也可以指定优先级

//这个类似与定义了task lib1，<< {} 表示执行doLast
//task lib1 << {
//    println 'lib1'
//}
//
//task lib2 << {
//    println 'lib2'
//}
//
//task noLib << {
//    println 'noLib'
//}
//gradle5.0版本<<操作符已经过时了，使用doLast

task lib1{
    doLast{
        println 'lib1'
    }
}

task lib2{
    doLast{
        println 'lib2'
    }
}

task lib3{
    doLast{
        println 'lib3'
    }
}

//动态添加依赖

task taskZz(dependsOn:[taskX,taskY]){
    //动态添加依赖，依赖lib开头的task
    dependsOn this.tasks.findAll { task->
        return task.name.startsWith('lib')
    }
    doLast{
        println 'taskZz'
    }
}
//> Task :app:lib1
//lib1
//
//> Task :app:lib2
//lib2
//
//> Task :app:lib3
//lib3
//
//> Task :app:taskX
//taskX
//
//> Task :app:taskY
//taskY
//
//> Task :app:taskZz
//taskZz
//执行阶段执行完毕






//美团walle打包步骤二
//并在当前App的 build.gradle 文件中apply这个插件，并添加上用于读取渠道号的arr包
//apply plugin: 'walle'
//dependencies {
//
//}
//并在当前App的 build.gradle 文件上配置插件，默认就行不用改：
//walle {
//    // 指定渠道包的输出路径
//    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
//    // 定制渠道包的APK的文件名称
//    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk'
//    // 渠道配置文件
//    channelFile = new File("${project.getProjectDir()}/channel")
//}